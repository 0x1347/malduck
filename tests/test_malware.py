import base64

from malduck import procmem, procmempe
from malduck.compression.aplib import aPLib


def test_mal1():
    with open("tests/files/mal1.b64") as f:
        mal1 = base64.b64decode(f.read())

    # Load dumped image
    ppe = procmempe(mal1)
    assert not ppe.is_image_loaded_as_memdump()
    # Decompress payload
    payload = aPLib().decompress(
        ppe.readv(ppe.imgbase + 0x8400, ppe.imgend)
    )
    embed_pe = procmem(payload, base=0)
    # Fix headers
    embed_pe.patchp(0, b"MZ")
    embed_pe.patchp(embed_pe.uint32p(0x3C), b"PE")
    # Load patched image into procmempe
    embed_pe = procmempe.from_memory(embed_pe, image=True)
    assert embed_pe.asciiz(0x1000a410) == b"StrToIntExA"


def test_mal2():
    """
    Sample without imports
    """
    with open("tests/files/mal2.b64") as f:
        mal2 = base64.b64decode(f.read())

    # Load correct image
    ppe = procmempe(mal2, detect_image=True)
    ppe.pe.resource("RT_MANIFEST").startswith(b"<?xml")


def test_mal3():
    with open("tests/files/mal3.b64") as f:
        mal3 = base64.b64decode(f.read())

    ppe = procmempe(mal3, base=0x00a40000)
    assert not ppe.is_image_loaded_as_memdump()
    assert ppe.pe.validate_resources()
